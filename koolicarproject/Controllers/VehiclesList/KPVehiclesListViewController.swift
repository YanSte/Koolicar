//
//  KPVehiclesListViewController.swift
//  koolicarproject
//
//  Created by Stephan Yannick on 30/09/2016.
//  Copyright (c) 2016 koolicar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

public protocol KPVehiclesListViewControllerInput {
    func displayVehicles()
    func displayFailVehicles(description:String)
}

public protocol KPVehiclesListViewControllerOutput {
    var vehicles: [Vehicle] { get }
    func fetchVehicleData()
}

final class KPVehiclesListViewController: KPGenericViewController, KPVehiclesListViewControllerInput {
    
    @IBOutlet fileprivate weak var tableView: UITableView!
    
    var output: KPVehiclesListViewControllerOutput!
    var router: KPVehiclesListRouter!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        KPVehiclesListConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        tableView.register(UINib(nibName: KPVehicleTableViewCell.reusableIdentifier, bundle: nil), forCellReuseIdentifier: KPVehicleTableViewCell.reusableIdentifier)
        tableView.separatorStyle = .none
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
    }
    override func viewDidAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        output.fetchVehicleData()
    }
    
    // MARK: Event handling
    
    // MARK: Display logic
    
    func displayVehicles() {
        tableView.reloadData()
    }
    
    func displayFailVehicles(description:String) {
        UIAlertController.openKPStandardAlert(delegate: self, title: "Un erreur c'est produite", message: description, buttonCancel: "Ok")
    }
}

// MARK: - UITableViewDelegate, UITableViewDataSource

extension KPVehiclesListViewController: UITableViewDelegate, UITableViewDataSource {
    
    internal func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard
            let vehicleAtIndex = output.vehicles.get(indexPath.row),
            let cell = tableView.dequeueReusableCell(withIdentifier: KPVehicleTableViewCell.reusableIdentifier) as? KPVehicleTableViewCell
            else {
                return getCellError()
        }
        cell.setContent(vehicle: vehicleAtIndex)
        return cell
    }
    
    internal func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return output.vehicles.count
    }
    
    internal func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
    }
    
    internal func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 420
    }
}
